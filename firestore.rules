rules_version = '2';
service cloud.firestore {
    match /databases/{database}/documents {
        
        function isAuth() {
            return request.auth != null
        }

        function isAdmin() {
            return isAuth() && 
            (request.auth.uid == '1bOAvkBFV1St3ekuxydGxNlqIGM2'
            || request.auth.uid == 'pUWeCV6FFFfikjLyo6KTuxayrzZ2'
            || request.auth.uid == 'Pv3IEvvuYONvSjNl630Tap0ERGN2')
        }

        function actualData() {
            return resource.data
        }

        function incomingData() {
            return request.resource.data
        }

        function notNull(field) {
            return incomingData().field != null
        }

        function notModified(field) {
            return actualData().field == incomingData().field
        }

        // lock access for all documents
        match /{document=**} {
            allow read, write: if false;
        }

        match /mails/{mail} {
            allow read: if isAdmin()

            // Only valid emails
            allow create: if 
                incomingData().mail.matches('.+@.+\\.[a-z]+')

            // unsubscribe
            allow delete: if isAuth()
                && actualData().mail == request.auth.token.email
        }
        
        match /magazines/{magazine} {
            allow read: if true
            allow write: if isAdmin()
        }

        match /articles/{articleId} {
            allow read: if true

            allow create: if isAuth()
                && incomingData().uid == request.auth.uid
                && incomingData().published == false
                && notNull(title)
                && notNull(content)
                && notNull(createdAt)
                && incomingData().createdAt == request.time
                && notNull(updatedAt)
                && incomingData().updatedAt == request.time

            allow update: if isAuth()
                && actualData().uid == request.auth.uid
                && notModified(createdAt)
                && request.time > (actualData().updatedAt + duration.time(1, 0, 0, 0))
                && incomingData().updatedAt > (actualData().updatedAt + duration.time(1, 0, 0, 0))

            allow delete: if isAuth()
                && actualData().uid == request.auth.uid
        }
    }
}